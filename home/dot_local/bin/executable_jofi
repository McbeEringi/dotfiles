#!/bin/gjs -m
//#!/usr/bin/env -S LD_PRELOAD=/usr/lib/libgtk4-layer-shell.so gjs -m
//import GLib from 'gi://GLib';
import GObject from 'gi://GObject';
import Gio from 'gi://Gio';
import Gtk from 'gi://Gtk?version=4.0';
import Gdk from 'gi://Gdk?version=4.0';
//import LayerShell from 'gi://Gtk4LayerShell';

//console.log(GLib.getenv('XDG_CURRENT_DESKTOP'));
/*[...GLib.get_system_data_dirs(),GLib.get_user_data_dir()].map(x=>(
	x.endsWith('/')||(x+='/'),
	x+='applications'
));*/

const
drun=({
	default_icon:ico=Gio.Icon.new_for_string('application-x-executable')
}={})=>Gio.AppInfo.get_all().filter(x=>x.should_show()).map(x=>(
	x=Gio.DesktopAppInfo.new(x.get_id()),
	{
		icon:x.get_icon()??ico,
		txt:x.get_display_name(),
		exec:_=>x.launch([],new Gio.AppLaunchContext()),
		menu:x.list_actions().map(y=>({
			txt:x.get_action_name(y),
			exec:_=>x.launch_action(y,new Gio.AppLaunchContext())
		})),
		keywords:[...new Set([
			x.get_display_name(),
			x.get_executable().split('/').at(-1),
			x.get_description(),
			...(x.get_categories()??'').split(';'),
			...x.get_keywords()??[],
			x.get_generic_name()
		].filter(x=>x).map(x=>x.toLowerCase()))]
	}
)),


main=({
	title='jofi',
	defaultWidth=480,defaultHeight=480,
	items
}={})=>((
	app=new Gtk.Application({application_id:'dev.mcbeeringi.jofi'})
)=>(
	app.connect('activate',_=>(
		((
			hbar=new Gtk.HeaderBar,
			win=new Gtk.ApplicationWindow({
				application:app,
				title,
				titlebar:hbar,
				//decorated:false,
				defaultWidth,defaultHeight
			}),
			esc=_=>(key=>(
				key.connect('key-pressed',(_,k)=>k==Gdk.KEY_Escape&&win.close()),
				key
			))(new Gtk.EventControllerKey),
		)=>(
			//LayerShell.init_for_window(win),
			//LayerShell.set_layer(win,LayerShell.Layer.TOP),
			//LayerShell.set_keyboard_mode(win,LayerShell.KeyboardMode.EXCLUSIVE),
			win.set_child(((
				box=new Gtk.Box({orientation:Gtk.Orientation.VERTICAL}),
				sinp=new Gtk.SearchEntry({search_delay:0,hexpand:true}),
				sbar=new Gtk.SearchBar,
				sbtn=new Gtk.ToggleButton({icon_name:'system-search-symbolic'}),
				scr=new Gtk.ScrolledWindow({vexpand:true}),
				ul=new Gtk.FlowBox({max_children_per_line:1,valign:Gtk.Align.START}),
				d=[],
				run=_=>(
					ul.remove_all(),
					d=sinp.text?items.filter(x=>x.keywords.some(x=>x.includes(sinp.text.toLowerCase()))):items,
					d.forEach(x=>ul.append(((
						li=new Gtk.FlowBoxChild,
						box=new Gtk.Box
					)=>(
						x.icon&&(x=>(
							x=Gtk.Image.new_from_gicon(x),
							x.icon_size=Gtk.IconSize.LARGE,
							box.append(x)
						))(x.icon),
						box.append(new Gtk.Label({label:x.txt})),
						li.set_child(box),
						li.tooltip_text=x.menu.map(x=>x.txt).join('\n'),
						li.connect('activate',_=>(x.exec(),win.close())),
						li
					))()))
				)
			)=>(
				sinp.connect('search-changed',_=>run()),run(),
				sinp.connect('activate',x=>(x=d[0])&&(x.exec(),win.close())),
				sinp.add_controller(esc()),
				sbar.set_key_capture_widget(win),
				sbar.set_child(sinp),
				sbtn.bind_property('active',sbar,'search-mode-enabled',GObject.BindingFlags.BIDIRECTIONAL),

				hbar.pack_start(sbtn),

				box.append(sbar),
				box.append((_=>(
					scr.set_child(ul),
					scr
				))()),
				box
			))()),
			win.add_controller(esc()),
			win.present()
		))()
	)),
	app.run([])
))();


console.log(drun());
main({title:'launch...',items:drun()});
